y = "Number of Species"
) + coord_flip()
##########################################
##     Parks Ranked by Biodiversity     ##
##########################################
# Fisher Ankney
# January 12 2018
# Install packages
library('tidyverse')
# Import dataset
# parks <- read_csv('../input/parks.csv')
# species <- read_csv('../input/species.csv')
## creating biodiversity dataframes
species_cleaned <- species %>%
filter(Occurrence == "Present") %>%
mutate(park_name = str_replace(`Park Name`, " Na.*", ""))
species_cleaned
plant_biodiv <- species_cleaned %>%
filter(Category == "Algae" | Category == "Fungi" | Category == "Nonvascular Plant" | Category == "Vascular Plant") %>%
group_by(park_name) %>%
mutate(total_div = n())
plant_biodiv
animal_biodiv <- species_cleaned %>%
filter(Category == "Amphibian" | Category == "Reptile" | Category == "Bird" | Category == "Fish" | Category ==  "Mammal") %>%
group_by(park_name) %>%
mutate(total_div = n())
animal_biodiv
# Plotting Plant Biodiversity
ggplot(plant_biodiv) +
geom_bar(
mapping = aes(x = fct_reorder(park_name, total_div), fill = Category),    # catagories along the x axis
width = 0.8,
color = "black",
alpha = 0.8
) +
labs(title="Plant Biodiversity Within U.S. National Parks",                          # labels
caption="Source: Kaggle biodiversity dataset",
x = "National Park",
y = "Number of Species"
) +
coord_flip()
##########################################
##     Parks Ranked by Biodiversity     ##
##########################################
# Fisher Ankney
# January 12 2018
# Install packages
library('tidyverse')
# Import dataset
parks <- read_csv('../input/parks.csv')
species <- read_csv('../input/species.csv')
## creating biodiversity dataframes
species_cleaned <- species %>%
filter(Occurrence == "Present") %>%
mutate(park_name = str_replace(`Park Name`, " Na.*", ""))
species_cleaned
plant_biodiv <- species_cleaned %>%
filter(Category == "Algae" | Category == "Fungi" | Category == "Nonvascular Plant" | Category == "Vascular Plant") %>%
group_by(park_name) %>%
mutate(total_div = n())
plant_biodiv
animal_biodiv <- species_cleaned %>%
filter(Category == "Amphibian" | Category == "Reptile" | Category == "Bird" | Category == "Fish" | Category ==  "Mammal") %>%
group_by(park_name) %>%
mutate(total_div = n())
animal_biodiv
# Plotting Plant Biodiversity
ggplot(plant_biodiv) +
geom_bar(
mapping = aes(x = fct_reorder(park_name, total_div), fill = Category),    # catagories along the x axis
width = 0.8,
color = "black",
alpha = 0.8
) +
labs(title="Plant Biodiversity Within U.S. National Parks",                          # labels
caption="Source: Kaggle biodiversity dataset",
x = "National Park",
y = "Number of Species"
) +
coord_flip()
# Plotting Animal Biodiversity
ggplot(animal_biodiv) +
geom_bar(
mapping = aes(x = fct_reorder(park_name, total_div), fill = Category),    # catagories along the x axis
width = 0.8,
color = "black",
alpha = 0.8
) +
labs(title="Animal Biodiversity Within U.S. National Parks",                          # labels
caption="Source: Kaggle biodiversity dataset",
x = "National Park",
y = "Number of Species"
) + coord_flip()
# Import dataset
parks <- read_csv('../input/parks.csv')
species <- read_csv('../input/species.csv')
parks <- read_csv('~/../input/parks.csv')
parks <- read_csv('parks.csv')
setwd("~/Documents/data_science/np_biodiversity/input")
parks <- read_csv('parks.csv')
species <- read_csv('species.csv')
## creating biodiversity dataframes
species_cleaned <- species %>%
filter(Occurrence == "Present") %>%
mutate(park_name = str_replace(`Park Name`, " Na.*", ""))
species_cleaned
plant_biodiv <- species_cleaned %>%
filter(Category == "Algae" | Category == "Fungi" | Category == "Nonvascular Plant" | Category == "Vascular Plant") %>%
group_by(park_name) %>%
mutate(total_div = n())
plant_biodiv
animal_biodiv <- species_cleaned %>%
filter(Category == "Amphibian" | Category == "Reptile" | Category == "Bird" | Category == "Fish" | Category ==  "Mammal") %>%
group_by(park_name) %>%
mutate(total_div = n())
animal_biodiv
# Plotting Plant Biodiversity
ggplot(plant_biodiv) +
geom_bar(
mapping = aes(x = fct_reorder(park_name, total_div), fill = Category),    # catagories along the x axis
width = 0.8,
color = "black",
alpha = 0.8
) +
labs(title="Plant Biodiversity Within U.S. National Parks",                          # labels
caption="Source: Kaggle biodiversity dataset",
x = "National Park",
y = "Number of Species"
) +
coord_flip()
# Plotting Animal Biodiversity
ggplot(animal_biodiv) +
geom_bar(
mapping = aes(x = fct_reorder(park_name, total_div), fill = Category),    # catagories along the x axis
width = 0.8,
color = "black",
alpha = 0.8
) +
labs(title="Animal Biodiversity Within U.S. National Parks",                          # labels
caption="Source: Kaggle biodiversity dataset",
x = "National Park",
y = "Number of Species"
) + coord_flip()
# Plotting Plant Biodiversity
ggplot(plant_biodiv) +
geom_bar(
mapping = aes(x = fct_reorder(park_name, total_div), fill = Category),    # catagories along the x axis
width = 0.8,
color = "black",
alpha = 0.8
) +
labs(title="Plant Biodiversity Within U.S. National Parks",                          # labels
caption="Source: Kaggle biodiversity dataset",
x = "National Park",
y = "Number of Species"
) +
coord_flip()
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# after creating the function its a good idea to test it with inputs
rescale01(c(-10,0,10))
rescale01(c(1,2,3,NA,5))
x <- c(1:10, Inf)
rescale01(x)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(x)
mean_funct <- function(x) {
mean(x, is.na=TRUE)
}
mean_funct(c(1,2,3))
mean_funct(c(1,2,3,4,5)
mean_funct(c(1,2,3,4,5))
mean_funct(c(1,2,3,4,5,NA))
sum_funct <- function(x) {
x / sum(x, na.rm = TRUE)
}
sum_funct(c(1,2,3,4,5))
sd_over_mean <- function(x) {
sd(x, na.rm=TRUE) / mean(x, na.rm=TRUE)
}
sd_over_mean(7)
sd_over_mean(c(1,2,6,8,9))
s
fizzbuzz <- function(x) {
if ((x %% 3) = 0)
print("fizz")
} else {
print("wrong")
}
fizzbuzz <- function(x) {
if ((x %% 3) = 0) {
print("fizz")
} else {
print("wrong")
}
}
fizzbuzz <- function(x) {
if ((x %% 3) = 0) {
print("fizz")
} else {
print("wrong")
}
}
for(i in 1:100) {
print(i)
}
for(i in 1:100) {
if (i %% 3 == 0) {
print("Fizz")
} else if (i %% 5 == 0) {
print("Buzz")
} else if ( i %% 3 == 0 && i %% 5 == 0) {
print("FizzBuzz")
} else
print(i)
}
for(i in 1:100) {
if ( i %% 3 == 0 && i %% 5 == 0) {
print("FizzBuzz")
} else if (i %% 3 == 0) {
print("Fizz")
} else if (i %% 5 == 0) {
print("Buzz")
} else
print(i)
}
fizzbuzz <- function(i) {
for(i) {
if ( i %% 3 == 0 && i %% 5 == 0) {
print("FizzBuzz")
} else if (i %% 3 == 0) {
print("Fizz")
} else if (i %% 5 == 0) {
print("Buzz")
} else
print(i)
}
}
fizzbuzz <- function(x) {
stopifnot( length(x)==1 && is.numeric(x) )
if ( x %% 3 == 0 && x %% 5 == 0) {
print("FizzBuzz")
} else if (x %% 3 == 0) {
print("Fizz")
} else if (x %% 5 == 0) {
print("Buzz")
} else
print(x)
}
fizzbuzz(7351)
fizzbuzz(7353)
fizzbuzz(7330)
fizzbuzz(30)
1:10 %% 3 == 0
# Numeric vectors
typeof(1)
typeof(1L)
1.5L
# load necissary libraries
library('tidyverse')
x <- sqrt(2) ^ 2
x - 2
sample(10)
sample(1)
sample(10)
sample(100)
sample(10)
sample(7)
1:10 + 1
1:10 + 1:2
tibble(x = 1:4, y = 1:2)
tibble(x = 1:4, y = rep(1:2, 2))
# naming vectors
c(x = 1, y = 2, z = 3)
set_names(1:3, c("a", "b", "c"))
x <- c("one", "two", "three", "four", "five")
x[c(3, 2, 5)]
x[c(1, 1, 5, 5, 5, 2)]
# negative values drop the element specified
x[c(-1, -3, -5)]
# error to mix
x[c(-1, 2)]
x[0]
# Recursive vectors (lists)
list(1,2,3)
str(x)
y <- list("a", 1L, 1.5, TRUE)
y
str(y)
z <- list(list(1,2), list(3,4))
str(z)
## Three ways to subset a list
a <- list(a = 1:3, b = "a string", c = pi, d = list(-1, -5))
# [ extracts a sub-list, always resulting in a list
str(a[1:2])
str(a[4])
# [[ extracts a single component, removes a level of heirarchy
str(a[[1]])
str(a[[4]])
# $ shorthand for extracting name (similiar to [[]])
a$a
str(a[["d"]])
# $ shorthand for extracting name (similiar to [[]])
a$a
b <- list(a, b, list(a,b), list(e,f))
list_b <- list(a, b, list(a,b), list(e,f))
list_b <- list("a", b", list(a,b), list(e,f))
list_b <- list("a", "b", list("a","b"), list("e","f"))
list_b <- list("a", "b", list("a","b"), list("e","f"))
list_b
hms::hms(3600)
attributes(hms:hms)
hms
?hms::hms
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
mtcars
output <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
output[[i]] <- mean(mtcars[[i]])
}
output
flights
library('nycflights13')
install.packages('nycflights13')
library('nycflights13')
str(flights)
str(flights$year)
output <- vector("chr", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- summar(flights[[i]])
}
output
output <- vector("chr", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- summary(flights[[i]])
}
output
output <- vector("chr", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- str(flights[[i]])
}
output
output2 <- vector("chr", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- str(flights[[i]])
}
output2
#determine the type of column in nycflights13::flights
output2 <- vector("chr", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- str(flights[[i]])
}
output2
output2 <- vector("chr", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- typeof(flights[[i]])
}
output2
output2 <- vector("character", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- typeof(flights[[i]])
}
output2
output2 <- vector("list", ncol(flights))
for (i in seq_along(flights)) {
output[[i]] <- typeof(flights[[i]])
}
output2
output2 <- vector("list", ncol(flights))
names(types) <- names(flights)
for (i in seq_along(flights)) {
types[[i]] <- class(flights[[i]])
}
output2
<- vector("list", length = ncol(flights))
names(types) <- names(flights)
for (i in seq_along(flights)) {
types[[i]] <- class(flights[[i]])
}
types
#determine the type of column in nycflights13::flights
types <- vector("list", length = ncol(flights))
names(types) <- names(flights)
for (i in seq_along(flights)) {
types[[i]] <- class(flights[[i]])
}
types
iris
iris_unique <- vector("list", length = ncol(iris))
for (i in seq_along(iris)) {
iris_unique[[i]] <- unique(iris[[i]])
}
iris-unique
iris_unique <- vector("list", length = ncol(iris))
for (i in seq_along(iris)) {
iris_unique[[i]] <- unique(iris[[i]])
}
iris_unique
alice_the_camel <- function(x, y) {
print(x "the camel has" y "humps")
}
print(hello)
x <- 10
print(x)
print(x "hello")
print "\x hello"
print("hello x")
x
x print("hello")
x
print(x) print("hello")
cat(x, "my name is")
alice_the_camel <- function(x, y) {
cat(x, "the camel has", y "humps")
}
alice_the_camel <- function(x, y) {
return cat(x, "the camel has", y "humps")
}
alice_the_camel <- function(x, y) {
return(cat(x, "the camel has", y "humps"))
}
alice_the_camel <- function(x) {
return(cat(x, "the camel has", "humps"))
}
alice_the_camel(5)
alice_the_camel(alice)
alice_the_camel <- function(x) {
return(cat(x, "the camel has", "humps"))
}
alice_the_camel(alice)
alice_the_camel <- function(x) {
return(cat(x, "the camel has", "humps"))
}
alice_the_camel(alice)
humps <- c("five", "four", "three", "two", "one", "no")
for (i in humps) {
cat(str_c("Alice the camel has ", rep(i, 3), " humps.",
collapse = "\n"), "\n")
if (i == "no") {
cat("Now Alice is a horse.\n")
} else {
cat("So go, Alice, go.\n")
}
cat("\n")
}
camel_song <- function(x,y) {
print(x,y)
}
camel_song(hello, world)
camel_song <- function(x,y) {
print("x","y")
}
camel_song(hello, world)
knitr::opts_chunk$set(echo = TRUE)
---
title: "r_markdown_test"
author: "fisher"
date: "1/16/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r cars}
(cars)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Cmd+Option+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
plot(cars)
plot(cars)
print("new code by cmd+opt+i")
